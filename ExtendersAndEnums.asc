/******************************************************************************/
/*  Hide(this Character*)
/*  Sets the character's transparency to 100%
/******************************************************************************/
function Hide(this Character*){
  this.Transparency = 100;
}
/******************************************************************************/
/*  Show(this Character*)
/*  Sets the character's transparency to 100%
/******************************************************************************/
function Show(this Character*){
  this.Transparency = 0;
}
/******************************************************************************/
/*  SetPosition(this Character*, int iX, int iY)
/*  Character function to make it easier and cleaner to set the X and Y of the
/*  target character.
/******************************************************************************/
function SetPosition(this Character*, int iX, int iY){
  if( iX != -1 ) this.x = iX;
  if( iY != -1 ) this.y = iY;
}
/******************************************************************************/
/*  TeleportToMouse(this Character*, int iX, int iY)
/*  Character function to immediately teleport to the mouse coordinates
/******************************************************************************/
function TeleportToMouse( this Character* ){
  this.x = mouse.x+GetViewportX();
  this.y = mouse.y+GetViewportY();
}

/******************************************************************************/
/*  WalkRelative(this Character*, int iXAmount, int iYAmount, int iBlocking, int iWalkAreas)
/*  Character function to make it easier to walk to a position based on the
/*  player's current starting position. Good for room entry code.
/******************************************************************************/
function WalkRelative(this Character*, int iXAmount, int iYAmount, int iBlocking, int iWalkAreas){
  int iWalkX;
  int iWalkY;
  
  if( iXAmount == 0 ) iWalkX = this.x;
  else iWalkX = this.x + iXAmount;
  
  if( iYAmount == 0 ) iWalkY = this.y;
  else iWalkY = this.y + iYAmount;
  
  this.Walk( iWalkX,  iWalkY, iBlocking, iWalkAreas );
}

/******************************************************************************/
/*  CurrentWalkableArea(this Character*)
/*  Returns the current walkable area that the character is standing on.
/******************************************************************************/
function CurrentWalkableArea(this Character*){
  return GetWalkableAreaAtScreen( player.x - Screen.Viewport.X, player.y - Screen.Viewport.Y );
}



function PlayerShip::HasPower(){
  
  if( this.HasReactor && this.HasWires )
    return true;
  else
    return false;
}


PlayerShip Mallard;
export Mallard;