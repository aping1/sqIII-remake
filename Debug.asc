bool bShowDebugPanel = false;
GUI* gVisualDebugger;

/******************************************************************************/
/* DebugMod
/* System to track debugging messages and display them for a preset time
/* before clearing. Currently limited to 5 messages. The debug panel
/* must be visible for messages to show.
/*
/* Call Watcher.AddMessage( <STRING> ) to use feature.
/******************************************************************************/
DebugMod Watcher;
export Watcher;

/******************************************************************************/
/* DebugMod::ShiftMessages()
/* Advance each message to the next slot (this should never need to be called
/* as it is called automatically
/******************************************************************************/
void DebugMod::ShiftMessages(){
  Watcher.Message5 = Watcher.Message4;
  Watcher.Timer5 = Watcher.Timer4;
  
  Watcher.Message4 = Watcher.Message3;
  Watcher.Timer4 = Watcher.Timer3;
  
  Watcher.Message3 = Watcher.Message2;
  Watcher.Timer3 = Watcher.Timer2;
  
  Watcher.Message2 = Watcher.Message1;
  Watcher.Timer2 = Watcher.Timer1;
}
/******************************************************************************/
/* DebugMod::AddMessage()
/* Adds a new message and shifts the old messages
/******************************************************************************/
void DebugMod::AddMessage( String sMessage ){
  // If no message is provided don't do anything.
  if( sMessage == "" ) return;
  
  if( Watcher.Timer1 != 0)
    Watcher.ShiftMessages();
    
  Watcher.Message1 = sMessage;
  Watcher.Timer1  = 120;
}

/******************************************************************************/
/* Visual Debug Panel
/* 
/******************************************************************************/
VisualDebugger vDebugPanel;

/******************************************************************************/
/* VisualDebugger::CheckVisibility()
/* Determine if SHIFT is held down or if CAPS LOCK is enabled. If so, ensure
/* the debug panel displays
/******************************************************************************/
void VisualDebugger::CheckVisibility(){
  if( IsKeyPressed( 403 ) && gVisualDebugger.Visible == false || System.CapsLock && gVisualDebugger.Visible == false ){
    gVisualDebugger.Visible = true;
    Debug( 4, 1 );
  }
  else if( !IsKeyPressed( 403 ) && gVisualDebugger.Visible == true && ! System.CapsLock ){
    gVisualDebugger.Visible = false;
    Debug( 4, 0 );
  }
}

/******************************************************************************/
/* VisualDebugger::Update()
/* If the debug panel is visible ensure the information is up to date.
/******************************************************************************/
void VisualDebugger::Update(){
  if( gVisualDebugger.Visible == true ){
    Region* egoRegion = Region.GetAtRoomXY( cEgo.x, cEgo.y );
    
    // Figure out the object type and name of whatever is under the mouse.
    int locationType = GetLocationType( mouse.x, mouse.y );
    String locationTypeName="";
    
    if( locationType == 1 )
      locationTypeName = "Hotspot";
    else if( locationType == 2 )
      locationTypeName = "Character";
    else if( locationType == 3 )
      locationTypeName = "Object";
    
    // Info about the player.
    lRoom.Text    = String.Format( "Room: %d->%d", cEgo.PreviousRoom, cEgo.Room );
    lPlayerX.Text = String.Format( "EGO X,Y: %d, %d", cEgo.x, cEgo.y );
    lScaling.Text = String.Format( "Scaling: %d", cEgo.Scaling );
    lWalkArea.Text = String.Format( "WALK\\REG: %d, %d", GetWalkableAreaAt( cEgo.x, cEgo.y ), egoRegion.ID );
    if( cEgo.Animating == true ){
      lView.Text = String.Format( "View: %d,%d (A)", cEgo.View, cEgo.Loop );
    }
    else
      lView.Text = String.Format( "View: %d,%d", cEgo.View, cEgo.Loop );
    // Info about the mouse.
    lMouseXY.Text = String.Format( "MOUSE X,Y: %d, %d", mouse.x, mouse.y );
    
    if( locationTypeName != "" )
      lTarget.Text = String.Format( "Targeting: %s - %s", locationTypeName, Game.GetLocationName( mouse.x, mouse.y ) );
    else
      lTarget.Text = "";
  }
}

/******************************************************************************/
/* game_start()
/* Block of code which initializes upon the game loading. Anything in here happens
/* before the first room is even loaded.
/******************************************************************************/
function game_start() {
  // Set the GUI to use for the debug panel below
  gVisualDebugger = gDebugPanel;
}

/******************************************************************************/
/* on_key_press
/* Key handlers for debugging functionality
/******************************************************************************/
function on_key_press(int keycode) {
  if (IsGamePaused() == 1) keycode=0;  // game paused, so don't react to keypresses

  // DEBUG FUNCTIONS
  if( game.debug_mode == true ){
    if( keycode == eKeyCtrlT ) player.TeleportToMouse();
    if (keycode == eKeyCtrlS) Debug(0,0);  // Ctrl-S, give all inventory
    if (keycode == eKeyCtrlV) Debug(1,0);  // Ctrl-V, version
    if (keycode == eKeyCtrlA) Debug(2,0);  // Ctrl-A, show walkable areas
    if (keycode == eKeyCtrlX) Debug(3,0);  // Ctrl-X, teleport to room
    if (keycode == eKeyCtrlW) player.PlaceOnWalkableArea(); //Ctrl-W, move to walkable area 
    
    if( keycode == eKey9 ) {
      ShowDeathGUI( eDeathOneWayToLowerYourBloodPressure );
    }
  }
}

/******************************************************************************/
/* repeatedly_execute_always
/* Repeated code for maintaining debug functions
/******************************************************************************/
function repeatedly_execute_always(){
  if( game.debug_mode ){    
    
    // Handle the debug panel
    vDebugPanel.CheckVisibility();
    vDebugPanel.Update();
    
    
    if( Watcher.Timer1 != 0 )
      Watcher.Timer1 --;

    if( Watcher.Timer2 != 0 )
      Watcher.Timer2 --;

    if( Watcher.Timer3 != 0 )
      Watcher.Timer3 --;

    if( Watcher.Timer4 != 0 )
      Watcher.Timer4 --;

    if( Watcher.Timer5 != 0 )
      Watcher.Timer5 --;

    if( Watcher.Timer1 != 0 ) lblDebugMessage1.Text = Watcher.Message1;
    else lblDebugMessage1.Text = "";
    
    if( Watcher.Timer2 != 0 ) lblDebugMessage2.Text = Watcher.Message2;
    else lblDebugMessage2.Text = "";
    
    if( Watcher.Timer3 != 0 ) lblDebugMessage3.Text = Watcher.Message3;
    else lblDebugMessage3.Text = "";
    
    if( Watcher.Timer4 != 0 ) lblDebugMessage4.Text = Watcher.Message4;
    else lblDebugMessage4.Text = "";

    if( Watcher.Timer5 != 0 ) lblDebugMessage5.Text = Watcher.Message5;
    else lblDebugMessage5.Text = "";
  }
}

