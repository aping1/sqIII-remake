// main global script file

// A function that initializes a bunch of stuff.
function initialize_control_panel() { 
  // Centre the control panel
  gPanel.Centre(); 
  // Centre the Restart dialog as well
  gRestartYN.Centre(); 
    
  //And now, set all the defaults
  System.Volume = 100;
  sldAudio.Value = System.Volume;
  SetGameSpeed(70);
  sldSpeed.Value = 70;
  
  if (IsSpeechVoxAvailable()) {
     Speech.VoiceMode = eSpeechVoiceAndText;
     btnVoice.NormalGraphic = 306;
     btnText.NormalGraphic = 311;
     SetSpeechVolume(255);
  }
  else {
    Speech.VoiceMode = eSpeechTextOnly;
    btnVoice.NormalGraphic = 305;
    btnText.NormalGraphic = 311;
  }
  
  /*if (System.SupportsGammaControl) {
    System.Gamma = 100;
    sldGamma.Value = 100;
  }*/
}

// Called when the game starts, before the first room is loaded
function game_start() {   
  // Put the code all in a function and then just call the function. 
  // It saves cluttering up places like game_start.
  initialize_control_panel(); 
  // Use the KeyboardMovement module to, per default, replicate the standard
  // keyboard movement of most Sierra games. See KeyboardMovement.txt for more info
  KeyboardMovement.SetMode(eKeyboardMovement_Tapping); 
}


function repeatedly_execute() {
  
  // Put here anything you want to happen every game cycle, even when
  // the game is paused. This will not run when the game is blocked
  // inside a command like a blocking Walk()
  
  if (IsGamePaused() == 1) return;

  // Put here anything you want to happen every game cycle, but not
  // when the game is paused.
  
}

function repeatedly_execute_always() {
  
  // Put anything you want to happen every game cycle, even
  // when the game is blocked inside a command like a
  // blocking Walk().
  // You cannot run blocking commands from this function.
  
}

function show_inventory_window () 
{
  gInventory.Visible = true;
  // switch to the Use cursor (to select items with)
  mouse.Mode = eModeInteract;
  // But, override the appearance to look like the arrow
  mouse.UseModeGraphic(eModePointer);
}

function show_save_game_dialog()
{
  gSaveGame.Visible = true;
  // Get the list of save games
  lstSaveGamesList.FillSaveGameList();
  if (lstSaveGamesList.ItemCount > 0)
  {
    // If there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // No save games yet, default empty text.
    txtNewSaveName.Text = "";
  }
  mouse.UseModeGraphic(eModePointer);
  gIconbar.Visible = false;
}

function show_restore_game_dialog()
{
  gRestoreGame.Visible = true;
  lstRestoreGamesList.FillSaveGameList();
  mouse.UseModeGraphic(eModePointer);
  gIconbar.Visible = false;
}

function close_save_game_dialog()
{
  gSaveGame.Visible = false;
  mouse.UseDefaultGraphic();
  gIconbar.Visible = true;
}

function close_restore_game_dialog()
{
  gRestoreGame.Visible = false;
  mouse.UseDefaultGraphic();
  gIconbar.Visible = true;
}

// Called when a key is pressed. keycode holds the key's ASCII code
function on_key_press(eKeyCode keycode) {
  // The following is called before "if game is paused keycode=0", so
  // it'll happen even when the game is paused.
  
  if ((keycode == eKeyEscape) && gRestartYN.Visible) {
    //Use ESC to cancel restart.
    gRestartYN.Visible = false; 
    gIconbar.Visible = true;
    // If the panel's not ON, then the player must have gotten here by tapping F9,
    // therefore his cursor needs restoring. If the panel IS on, then it doesn't,
    // because it's already a pointer. Get used to thinking like this!!
    if (!gPanel.Visible) mouse.UseDefaultGraphic(); 
    return;
  }
  if ((keycode == eKeyEscape) && gPanel.Visible) {
    // Use ESC to turn the panel off.
    if (UIType=="New") gNewPanel.Visible = false; else gPanel.Visible = false; 
    mouse.UseDefaultGraphic();
    gIconbar.Visible = true;
    return;
  }
  if ((keycode == eKeyEscape) && (gSaveGame.Visible))
  {
    // Use ESC to close the save game dialog
    close_save_game_dialog();
    return;
  }
  if ((keycode == eKeyEscape) && (gRestoreGame.Visible))
  {
    // Use ESC to close the restore game dialog
    close_restore_game_dialog();
    return;
  }
  
  if (keycode == eKeyReturn) { 
    // ENTER, in this case merely confirms restart
    if (gRestartYN.Visible) RestartGame();
  }

  if (IsGamePaused() || (IsInterfaceEnabled() == 0))
  {
    // If the game is paused with a modal GUI on the
    // screen, or the player interface is disabled in
    // a cut scene, ignore any keypresses.
    return;
  }

  // FUNCTION KEYS AND SYSTEM SHORTCUTS
  if (keycode == eKeyEscape) {
    // ESC
    if (UIType=="New") gNewPanel.Visible = true; else gPanel.Visible = true; 
    gIconbar.Visible = false;
    mouse.UseModeGraphic(eModePointer);
  }
  if (keycode == eKeyCtrlQ)  QuitGame(1);   // Ctrl-Q
  if (keycode == eKeyF5) show_save_game_dialog();   // F5
  if (keycode == eKeyF7) show_restore_game_dialog();  // F7
  if (keycode == eKeyF9) {
    // F9, asks the player to confirm restarting (so much better to always confirm first)
    gRestartYN.Visible = true;  
    gIconbar.Visible = false;
    mouse.UseModeGraphic(eModePointer);
  }
  if (keycode == eKeyF12) SaveScreenShot("scrnshot.bmp");  // F12
  if (keycode == eKeyTab)   show_inventory_window();  // Tab, show inventory

  // GAME COMMAND SHORTCUTS
  if (keycode == 'W') mouse.Mode=eModeWalkto; //Notice this alternate way to indicate keycodes.
  if (keycode == 'L') mouse.Mode=eModeLookat; //Note that all we do here is set modes.
  if (keycode == 'U') mouse.Mode=eModeInteract; //If you want something else to happen, such as GUI buttons highlighting,
  if (keycode == 'T') mouse.Mode=eModeTalkto; //you'll need some more scripting done.
  if (keycode == 'I') mouse.Mode=eModeUseinv; //But this will, as-is, give you some standard keyboard shortcuts your players will very much appreciate.

  // For extra cursor modes, such as pick up, feel free to add as you will.
  // Uncomment the line below if you use the "Pick Up" mode.
  //if (keycode == 'P' || keycode == 'G') mouse.Mode=eModePickup; 

  // DEBUG FUNCTIONS
  if (keycode == eKeyCtrlS)  Debug(0,0);  // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV)  Debug(1,0);  // Ctrl-V, version
  if (keycode == eKeyCtrlA)  Debug(2,0);  // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX)  Debug(3,0);  // Ctrl-X, teleport to room
  if (keycode == eKeyCtrlW && game.debug_mode) 
    player.PlaceOnWalkableArea(); //Ctrl-W, move to walkable area 
}


function on_mouse_click(MouseButton button) {
  // called when a mouse button is clicked. button is either LEFT or RIGHT
  if (IsGamePaused() == 1) {
    // Game is paused, so do nothing (ie. don't allow mouse click)
  }
  else if (button == eMouseLeft) {
    Room.ProcessClick(mouse.x, mouse.y, mouse.Mode );
  }
  else if (button == eMouseRight || button == eMouseWheelSouth){
    // right-click our mouse-wheel down, so cycle cursor
    mouse.SelectNextMode();
  }
  else if (button == eMouseMiddle) { 
    // Middle-button-click, default make character walk to clicked area (a little shortcut)
    // Could have been just "player.Walk(mouse.x,mouse.y)", but it's best to
    // leave our options open - what if you have a special script triggered
    // on "walking" mode?
    // Room.ProcessClick(mouse.x, mouse.y, eModeWalkto); 
    mouse.Mode = eModeWalkto;
  }
  else if (button == eMouseWheelNorth) { 
    // Mouse-wheel up, cycle cursors 
    // If mode isn't WALK, set the previous mode (notice usage of numbers instead
    // of eNums, when it suits us)...
    if (mouse.Mode>0) mouse.Mode=mouse.Mode-1; 
    else 
    { 
      // ...but if it is WALK mode...
      if (player.ActiveInventory!=null) 
      {
        //...and the player has a selected inventory item, set mouse mode to UseInv. 
        mouse.Mode=eModeUseinv; 
      }
      else 
      {
        // If they don't, however, just set it to mode TALK (change this line if you add more cursor modes)
        mouse.Mode=eModeTalkto; 
      }
    }
  }
}

function interface_click(int interface, int button) {
  // This function is obsolete, from 2.62 and earlier versions.
}

function btnInvUp_Click(GUIControl *control, MouseButton button) {
  invCustomInv.ScrollUp();
}

function btnInvDown_Click(GUIControl *control, MouseButton button) {
  invCustomInv.ScrollDown();
}

function btnInvOK_Click(GUIControl *control, MouseButton button) {
	// They pressed the OK button, close the GUI
	gInventory.Visible = false;
	mouse.UseDefaultGraphic();
}

function btnInvSelect_Click(GUIControl *control, MouseButton button) {
  
	// They pressed SELECT, so switch to the Get cursor
	mouse.Mode = eModeInteract;
	// But, override the appearance to look like the arrow
	mouse.UseModeGraphic(eModePointer);
}

function btnIconInv_Click(GUIControl *control, MouseButton button) {
  
  show_inventory_window();
}

function btnIconCurInv_Click(GUIControl *control, MouseButton button) {
  
  if (player.ActiveInventory != null)
    mouse.Mode = eModeUseinv;
}

function btnIconSave_Click(GUIControl *control, MouseButton button) 
{
  show_save_game_dialog();
}

function btnIconLoad_Click(GUIControl *control, MouseButton button) 
{
  show_restore_game_dialog();
}

function btnIconExit_Click(GUIControl *control, MouseButton button) {
  
  QuitGame(1);
}

function btnIconAbout_Click(GUIControl *control, MouseButton button) {
  
  Display("Help?");
}


//START OF CONTROL PANEL FUNCTIONS

function btnSave_OnClick(GUIControl *control, MouseButton button)
{
  if (UIType=="New") gNewPanel.Visible = false; else gPanel.Visible = false;
  mouse.UseDefaultGraphic();
  gIconbar.Visible = true;
  Wait(1);
  //btnSave_Click(btnSave, eMouseLeft);
}

function gControl_OnClick(GUI *theGui, MouseButton button)
{

}

function btnAbout_OnClick(GUIControl *control, MouseButton button)
{
Display("Adventure Game Studio run-time engine default game.");
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  if (UIType=="New") gNewPanel.Visible = false; else gPanel.Visible = false;
  Wait(1);
  QuitGame(1);
  if (UIType=="New") gNewPanel.Visible = true; else gPanel.Visible = true;
  gIconbar.Visible = false;
  mouse.UseModeGraphic(eModePointer);
}

function btnLoad_OnClick(GUIControl *control, MouseButton button)
{
  if (UIType=="New") gNewPanel.Visible = false; else gPanel.Visible = false;
  mouse.UseDefaultGraphic();
  gIconbar.Visible = true;
  Wait(1);
  //btnIconLoad_Click(btnIconLoad, eMouseLeft);
}

function btnResume_OnClick(GUIControl *control, MouseButton button)
{
  if (UIType=="New") gNewPanel.Visible = false; else gPanel.Visible = false;
  mouse.UseDefaultGraphic();
  gIconbar.Visible = true;
}

function sldAudio_OnChange(GUIControl *control)
{
  System.Volume = sldAudio.Value;
}

function sldMusic_OnChange(GUIControl *control)
{
  System.Volume = sldMusic.Value;
}

function sldVoice_OnChange(GUIControl *control)
{
  // Sets voice volume. Note that we don't check for the existence of speech.vox - 
  // we did that in game_start, so if it's not there the slider won't even be available.
  SetSpeechVolume(sldVoice.Value); 
}

function btnVoice_OnClick(GUIControl *control, MouseButton button)
{
  // Note that we don't check for the existence of speech.vox - we did that in game_start,
  // so if it's not there the button won't even be available.
  
  if (UIType=="Classic") {
    //IF speech is currently ON and text is ON, disable speech
    if ((btnVoice.NormalGraphic==306) && (btnText.NormalGraphic==311)) {
      btnVoice.NormalGraphic = 305;
      Speech.VoiceMode = eSpeechTextOnly;
    }
    //IF speech is currently ON and text is OFF, disable speech but enable text
    else if ((btnVoice.NormalGraphic==306) && (btnText.NormalGraphic==310)) {
      btnVoice.NormalGraphic = 305;
      btnText.NormalGraphic = 311;
      Speech.VoiceMode = eSpeechTextOnly;
    }
    //IF speech is currently OFF and text is ON, enable both
    else if ((btnVoice.NormalGraphic==305) && (btnText.NormalGraphic==311)) {
      btnVoice.NormalGraphic = 306;
      Speech.VoiceMode = eSpeechVoiceAndText;
    }
  }  
  else if (UIType=="New") {
    //IF speech is currently ON and text is ON, disable speech
    if ((bNewSpeech.NormalGraphic==284) && (bNewText.NormalGraphic==289)) {
      bNewSpeech.NormalGraphic = 283;
      Speech.VoiceMode = eSpeechTextOnly;
    }
    //IF speech is currently ON and text is OFF, disable speech but enable text
    else if ((bNewSpeech.NormalGraphic==284) && (bNewText.NormalGraphic==288)) {
      bNewSpeech.NormalGraphic = 283;
      bNewText.NormalGraphic = 289;
      Speech.VoiceMode = eSpeechTextOnly;
    }
    //IF speech is currently OFF and text is ON, enable both
    else if ((bNewSpeech.NormalGraphic==283) && (bNewText.NormalGraphic==289)) {
      bNewSpeech.NormalGraphic = 284;
      Speech.VoiceMode = eSpeechVoiceAndText;
    }
  }
}

function btnText_OnClick(GUIControl *control, MouseButton button)
{
  if (UIType=="Classic") {
    //IF speech is currently ON and text is ON, disable text
    if ((btnVoice.NormalGraphic==306) && (btnText.NormalGraphic==311)) {
      btnText.NormalGraphic = 310;
      Speech.VoiceMode = eSpeechVoiceOnly;
    }
    //IF speech is currently OFF and text is ON, disable text but enable speech
    else if ((btnVoice.NormalGraphic==305) && (btnText.NormalGraphic==311)) {
      btnVoice.NormalGraphic = 306;
      btnText.NormalGraphic = 310;
      Speech.VoiceMode = eSpeechVoiceOnly;
    }
    //IF speech is currently ON and text is OFF, enable both
    else if ((btnVoice.NormalGraphic==306) && (btnText.NormalGraphic==310)) {
      btnText.NormalGraphic = 311;
      Speech.VoiceMode = eSpeechVoiceAndText;
    }
  }
  else if (UIType=="New") {
    //IF speech is currently ON and text is ON, disable text
    if ((bNewSpeech.NormalGraphic==284) && (bNewText.NormalGraphic==289)) {
      bNewText.NormalGraphic = 288;
      Speech.VoiceMode = eSpeechVoiceOnly;
    }
    //IF speech is currently OFF and text is ON, disable text but enable speech
    else if ((bNewSpeech.NormalGraphic==283) && (bNewText.NormalGraphic==289)) {
      bNewSpeech.NormalGraphic = 284;
      bNewText.NormalGraphic = 288;
      Speech.VoiceMode = eSpeechVoiceOnly;
    }
    //IF speech is currently ON and text is OFF, enable both
    else if ((bNewSpeech.NormalGraphic==284) && (bNewText.NormalGraphic==288)) {
      bNewText.NormalGraphic = 289;
      Speech.VoiceMode = eSpeechVoiceAndText;
    }
  }
}

function bSwapUI_OnClick(GUIControl *control, MouseButton button)
{
  if (UIType=="Classic") {
    UIType = "New";
    bWalk.NormalGraphic = 251; bWalk.PushedGraphic = 250;
    bLook.NormalGraphic = 239; bLook.PushedGraphic = 238;
    bInteract.NormalGraphic = 249; bInteract.PushedGraphic = 248;
    bTalk.NormalGraphic = 245; bTalk.PushedGraphic = 244;
    bSmell.NormalGraphic = 243; bSmell.PushedGraphic = 242;
    bTaste.NormalGraphic = 247; bTaste.PushedGraphic = 246;
    btnIconInv.NormalGraphic = 237; btnIconInv.PushedGraphic = 236;
    bSettings.NormalGraphic = 241; bSettings.PushedGraphic = 240;
    btnIconAbout.NormalGraphic = 235; btnIconAbout.PushedGraphic = 234;
    mouse.ChangeModeGraphic(eModeWalkto, 212); mouse.ChangeModeView(eModeWalkto, 16); mouse.ChangeModeHotspot(eModeWalkto, 6, 19);
    mouse.ChangeModeGraphic(eModeLookat, 199); mouse.ChangeModeView(eModeLookat, 17); mouse.ChangeModeHotspot(eModeLookat, 10, 9);
    mouse.ChangeModeGraphic(eModeInteract, 210); mouse.ChangeModeView(eModeInteract, 18); mouse.ChangeModeHotspot(eModeInteract, 1, 0);
    mouse.ChangeModeGraphic(eModeTalkto, 205); mouse.ChangeModeView(eModeTalkto, 19); mouse.ChangeModeHotspot(eModeTalkto, 5, 18);
    mouse.ChangeModeGraphic(eModeSmell, 203); mouse.ChangeModeView(eModeSmell, 20); mouse.ChangeModeHotspot(eModeSmell, 4, 6);
    mouse.ChangeModeGraphic(eModeTaste, 207); mouse.ChangeModeView(eModeTaste, 21); mouse.ChangeModeHotspot(eModeTaste, 8, 8);
    mouse.ChangeModeGraphic(eModePointer, 197);
    NewMusicSlider.Value = sldMusic.Value;
    NewSoundSlider.Value = sldAudio.Value;
    NewVoiceSlider.Value = sldVoice.Value;    
    NewSpeedSlider.Value = sldSpeed.Value;
    gPanel.Visible = false;
    gNewPanel.Visible = true;
    mouse.UseModeGraphic(eModePointer);
  }
  
  else if (UIType=="New") {
    UIType = "Classic";
    bWalk.NormalGraphic = 37; bWalk.PushedGraphic = 36;
    bLook.NormalGraphic = 25; bLook.PushedGraphic = 24;
    bInteract.NormalGraphic = 19; bInteract.PushedGraphic = 18;
    bTalk.NormalGraphic = 33; bTalk.PushedGraphic = 32;
    bSmell.NormalGraphic = 31; bSmell.PushedGraphic = 30;
    bTaste.NormalGraphic = 35; bTaste.PushedGraphic = 34;
    btnIconInv.NormalGraphic = 23; btnIconInv.PushedGraphic = 22;
    bSettings.NormalGraphic = 29; bSettings.PushedGraphic = 28;
    btnIconAbout.NormalGraphic = 21; btnIconAbout.PushedGraphic = 20;
    mouse.ChangeModeGraphic(eModeWalkto, 44); mouse.ChangeModeView(eModeWalkto, 22); mouse.ChangeModeHotspot(eModeWalkto, 3, 8);
    mouse.ChangeModeGraphic(eModeLookat, 40); mouse.ChangeModeView(eModeLookat, 23); mouse.ChangeModeHotspot(eModeLookat, 3, 3);
    mouse.ChangeModeGraphic(eModeInteract, 48); mouse.ChangeModeView(eModeInteract, 24); mouse.ChangeModeHotspot(eModeInteract, 3, 3);
    mouse.ChangeModeGraphic(eModeTalkto, 42); mouse.ChangeModeView(eModeTalkto, 25); mouse.ChangeModeHotspot(eModeTalkto, 5, 4);
    mouse.ChangeModeGraphic(eModeSmell, 41); mouse.ChangeModeView(eModeSmell, 26); mouse.ChangeModeHotspot(eModeSmell, 3, 3);
    mouse.ChangeModeGraphic(eModeTaste, 43); mouse.ChangeModeView(eModeTaste, 27); mouse.ChangeModeHotspot(eModeTaste, 3, 3);
    mouse.ChangeModeGraphic(eModePointer, 70);
    sldMusic.Value = NewMusicSlider.Value;
    sldAudio.Value = NewSoundSlider.Value;
    sldVoice.Value = NewVoiceSlider.Value;
    sldSpeed.Value = NewSpeedSlider.Value;    
    gNewPanel.Visible = false;
    gPanel.Visible = true;
    mouse.UseModeGraphic(eModePointer);
  }
}



/* function sldGamma_OnChange(GUIControl *control)
{
  // Set the gamma. Note there's no need to check for anything else, as we ensured,
  // in game_start, that the slider won't even appear if it's not possible to do this.
  System.Gamma = sldGamma.Value; 
}
*/

/* function btnDefault_OnClick(GUIControl *control, MouseButton button)
{
  // Reset everything to default. You'll have to edit these as well as the sliders
  // if you'd rather have different default parameters.
  System.Volume = 100;
  sldAudio.Value = System.Volume;
  sldSpeed.Value = 40;
  SetGameSpeed(40);
  if (IsSpeechVoxAvailable()) {
     Speech.VoiceMode = eSpeechVoiceAndText;
     btnVoice.Text = "Voice and Text";
     sldVoice.Value = 255;
     SetSpeechVolume(255);
  }
  if (System.SupportsGammaControl) {
    System.Gamma = 100;
    sldGamma.Value = 100;
  }
}
*/
//END OF CONTROL PANEL FUNCTIONS

function dialog_request(int param) 
{
  // This is used by the dialog text parser if you need to process
  // text that the player types in to the parser.
  // It is not used by default.
}

function sldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(sldSpeed.Value);
}

function btnRestart_OnClick(GUIControl *control, MouseButton button)
{
  gRestartYN.Visible=true;
  gIconbar.Visible=false;
}

function btnRestartYes_OnClick(GUIControl *control, MouseButton button)
{
  RestartGame();
}

function btnRestartNo_OnClick(GUIControl *control, MouseButton button)
{
  gRestartYN.Visible = false;
  gIconbar.Visible = true;
  // If the panel's not ON, then the player must have gotten here by tapping F9,
  // therefore his cursor needs restoring. If the panel IS on, then it doesn't,
  // because it's already a pointer. Get used to thinking like this!!
  if ((!gPanel.Visible) || (!gNewPanel.Visible)) mouse.UseDefaultGraphic(); 
}

function btnCancelSave_OnClick(GUIControl *control, MouseButton button)
{
  close_save_game_dialog();
}

int find_save_slot(String name)
{
  bool slots[] = new bool[999];
  int i = 0;
  while (i < lstSaveGamesList.ItemCount)
  {
    if (lstSaveGamesList.Items[i] == name)
    {
      // found existing save with matching name
      return lstSaveGamesList.SaveGameSlots[i];
    }
    // remember which slots are already taken
    slots[lstSaveGamesList.SaveGameSlots[i]] = true;
    i++;
  }
 
  // Find first free save slot, starting with slot 1
  i = 1;
  while (i < 999)
  {
    if (!slots[i])
      return i;
    i++;
  }
  // no free slots found
  return -1;
}
 
function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = find_save_slot(txtNewSaveName.Text);
  if (gameSlotToSaveInto < 0)
  {
    Display("No more free save slots!");
    return;
  }
  SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
  close_save_game_dialog();
}

function btnCancelRestore_OnClick(GUIControl *control, MouseButton button)
{
  close_restore_game_dialog();
  if (Dead==true) gDeath.Visible = true;
}

function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }
  close_restore_game_dialog();
}

function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}

function txtNewSaveName_OnActivate(GUIControl *control)
{
  // Pressing return in the text box simulates clicking the Save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}

function bSettings_OnClick(GUIControl *control, MouseButton button)
{
  if (UIType=="Classic") if (UIType=="New") gNewPanel.Visible = true; else gPanel.Visible = true;
  else if (UIType=="New") gNewPanel.Visible = true;
  gIconbar.Visible=false;
  mouse.UseModeGraphic(eModePointer);
}



// DEFAULT MESSAGES
// ================

function cEgo_Look()
{
  Display("It's you, Roger Wilco!");
}

function cEgo_Interact()
{
  Display("You could do with a change of clothes. Who knows how many centuries you've been wearing this uniform?");
}

function cEgo_Talk()
{
  cEgo.SpeechView = 2;
  player.Say("I'm Roger Wilco!");
  cEgo.SpeechView = 5;
  player.Say("I don't know why I just said that.");
}

function cEgo_Mode8()
{
  Display("Not gonna lie, you smell pretty bad. That's to be expected, of course, given that you woke up after a prolonged period in suspended animation. But it's still gross.");
}

function cEgo_Mode9()
{
  Display("Who are you kidding. That never goes well.");
}

function unhandled_event(int what, int type) {
  
  // Default look
  if (((what==1) && (type==1)) || ((what==2) && (type==0)) || ((what==4) && (type==1))) {
    int message = Random(2);
    if (message==0) Display("That's so fantastically boring to behold, you have no words for it.");
    if (message==1) Display("That seems to have no remarkable features.");
    if (message==2) Display("You're suddenly overwhelmed with an intense feeling of boredom and decide to look at something else.");
  }
  
  // Default interact
  if (((what==1) && (type==2)) || ((what==2) && (type==1)) || ((what==4) && (type==2))) {
    int message = Random(2);
    if (message==0) Display("That's not for you to mess with.");
    if (message==1) Display("Keep your hands off that.");
    if (message==2) Display("Not everything in the galaxy deserves your handprint on it, Roger.");
  }
  
  // Default talk
  if (((what==1) && (type==4)) || ((what==2) && (type==2)) || ((what==4) && (type==4))) {
    int message = Random(2);
    if (message==0) Display("Lucky for you, it doesn't talk back.");
    if (message==1) Display("It's not exactly what you might call a sparkling conversationalist.");
    if (message==2) Display("It's not much of a talker, Roger.");
  }
  
  // Default smell
  // if (((what==1) && (type==8)) || ((what==2) && (type==6))) {
  if ((mouse.Mode==eModeSmell) && ((IsInteractionAvailable(mouse.x, mouse.y, eModeSmell) == 0))) {
    int message = Random(2);
    if (message==0) Display("Keep your sniffer to yourself.");
    if (message==1) Display("Your nose did not enjoy that one bit.");
    if (message==2) Display("You're not sure what smells worse - that, or your uniform.");
  }
  
  // Default taste
  if ((mouse.Mode==eModeTaste) && ((IsInteractionAvailable(mouse.x, mouse.y, eModeTaste) == 0))) {
    int message = Random(2);
    if (message==0) Display("Eww. Were you seriously going to put your tongue on that?");
    if (message==1) Display("I know it gets lonely in space but get it together, man.");
    if (message==2) Display("That does not deserve a tongue bath, especially not from you.");
  }
  
  // Default inventory
  if (((what==1) && (type==3)) || ((what==2) && (type==3)) || ((what==4) && (type==3))) {
    if (player.ActiveInventory==iBuckazoid) Display("Don't throw your money away!");
    else if (player.ActiveInventory==iMonolithRing) Display("That doesn't look like a coded message.");
    else if (player.ActiveInventory==iMonolithMeal) Display("No, Roger. Food goes in mouth.");
    else if (player.ActiveInventory==iInvisibelt) Display("No way! You went through a lot of trouble to get this belt. Don't just dump it anywhere.");
    else if (player.ActiveInventory==iGem) Display("The gem has lost its glow and wouldn't be of much use here.");
    else if (player.ActiveInventory==iLadder) Display("You don't need to scale that.");
    else {
      int message = Random(2);
      if (message==0) Display("You can't use the %s here.", player.ActiveInventory.Name);
      if (message==1) Display("That's no place for the %s.", player.ActiveInventory.Name);
      if (message==2) Display("If you throw the %s there, you might never get it back!", player.ActiveInventory.Name);
    }
  }
  
  // Look at character
  if ((what==3) && (type==0)) Display("This person doesn't look very interesting.");
  
  // Use character
  if ((what==3) && (type==1)) {
    int message = Random(2);
    if (message==0) Display("Most people would find that a bit presumptuous.");
    if (message==1) Display("That's a bit forward, don't you think?");
    if (message==2) Display("Your understanding of people's personal space leaves a lot to be desired.");
  }
  
  // Talk to character
  if ((what==3) && (type==2)) {
    int message = Random(2);
    if (message==0) Display("They don't appear to want to speak to you.");
    if (message==1) Display("Your attempts to strike up a conversation fail spectacularly.");
    if (message==2) Display("You're not here to make friends, Roger.");
  }
  
  // Inventory on character
  if ((what==3) && (type==3)) {
    Display("Don't give the %s away! You might need it later.");
  }
  
  // Smell character
  if ((what==3) && (type==6)) {
    int message = Random(2);
    if (message==0) Display("You'll have to curtail your canine behavior here, Roger.");
    if (message==1) Display("People don't take kindly to strange janitors walking up and sniffing them.");
    if (message==2) Display("Stop sniffing people, Roger. We've been over this.");
  }
  
  // Taste character
  if ((what==3) && (type==7)) {
    int message = Random(2);
    if (message==0) Display("Use it and lose it, buddy.");
    if (message==1) Display("At least buy them dinner first.");
    if (message==2) Display("You may have been in deep space for an indeterminate amount of time but you're not THAT lonely.");
  }
}




// DEATH
// =====

function YoureDead()
{
  Dead = true;
  gIconbar.Visible = false;
  mouse.UseModeGraphic(eModePointer);
  gDeath.Visible = true;
}

function bDeathRestore_OnClick(GUIControl *control, MouseButton button)
{
  gDeath.Visible = false;
  gRestoreGame.Visible = true;
  lstRestoreGamesList.FillSaveGameList();
  mouse.UseModeGraphic(eModePointer);
}

function bDeathRestart_OnClick(GUIControl *control, MouseButton button)
{
  gDeath.Visible = false;
  RestartGame();
}

function bDeathQuit_OnClick(GUIControl *control, MouseButton button)
{
  gDeath.Visible = false;
  Display("Thank you for playing Space Quest III VGA! We're sorry it had to be this way. Do come back soon.");
  QuitGame(0);
}


// GRABBER ACTIONS
// ===============


function bActivateGrabber_OnClick(GUIControl *control, MouseButton button)
{
  if (player.Room==8) {
    // If Roger is BACKGROUND, check if he's in position to grab the motivator
    if (player.y==135) {
      if (GrabberHasMotivator==false) {
        if ((player.x>160) && (player.x<200) && (MotivatorDumpedYay==false)) {
          GrabberGetMotivator = true;
        }
        else GrabberGetMotivator = false;
      }
     
      GrabberActive=true;
      player.ChangeView(13);
      if (GrabberHasMotivator==true) {
        object[5].Visible = true;
        object[5].X = ((player.x)-9); object[3].Y = ((player.y)-5);
        object[5].Move(((player.x)-9), 210, 1, eBlock, eAnywhere);
      }
      else {
        object[3].Visible = true;
        object[3].X = ((player.x)-9); object[3].Y = ((player.y)-5);
        object[3].Move(((player.x)-9), 210, 1, eBlock, eAnywhere);
      }
      
      if (player.x<640) player.ChangeRoom(1);
      else player.ChangeRoom(3);      
    }
    
    
    // If Roger is FOREGROUND, check if he's in a position to dump the motivator
    else if (player.y==195) {
      if (GrabberHasMotivator==true) {
        if (player.x>880) {
          GrabberDumpMotivator = true;
        }
        else GrabberDumpMotivator = false;
      }
      
      GrabberActive = true;
      player.ChangeView(12);
      if (GrabberHasMotivator==true) {
        object[6].Visible = true;
        object[6].X = ((player.x)-16); object[6].Y = ((player.y)-5);
        object[6].Move(((player.x)-16), 210, 1, eBlock, eAnywhere);
      }
      else {
        object[4].Visible = true;
        object[4].X = ((player.x)-16); object[4].Y = ((player.y)-5);
        object[4].Move(((player.x)-16), 210, 1, eBlock, eAnywhere);
      }
      
      if (player.x>640) player.ChangeRoom(4);
      else player.ChangeRoom(6);
    }
    
  }
  else if (player.Room==7) Display("The claw is programmed not to work in this area.");
}




// INVENTORY ITEMS
// ==================

function iBuckazoid_Look()
{
  if (Buckazoids==0) Display("These are buckazoids. As in, money. But right now, you don't actually have any. You're broke!");
  else Display("You have ", Buckazoids, " buckazoids.");
}

function cEgo_UseInv()
{
  Display("You attempt to shove it up your nose but luckily fail.");
}


// CHARACTERS
// ==========

// Garbage Freighter robot as character

function cControllerRobot_Interact()
{
  Display("The robot is too far away.");
}

function cControllerRobot_Look()
{

}

function cControllerRobot_Mode8()
{
  Display("You can't tell from here but he probably smells of efficiency.");
}

function cControllerRobot_Talk()
{
  player.SpeechView = 5;
  player.FaceCharacter(cControllerRobot);
  player.Say("Um, excuse me?");
  Wait(20);
  Display("The robot does not appear to be voice activated.");
}

function cControllerRobot_Mode9()
{
  player.FaceCharacter(cControllerRobot);
  Display("He probably wouldn't appreciate you distracting him with your bizarre behavior.");
}




