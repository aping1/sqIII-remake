AudioChannel *BackgroundMusic;
export BackgroundMusic;
/******************************************************************************/
/*  SaveMouseMode()
/*  Saves the currently selected mouse cursor to giLastMouseMode
/*  Note that the pointer will not be saved and the cursor will only save if
/*  there is not already a saved cursor
/******************************************************************************/
function SaveMouseMode(){
  if( giLastMouseCursor == -1 && mouse.Mode != eModePointer ) giLastMouseCursor = mouse.Mode;
}
/******************************************************************************/
/*  RestoreMouseMode()
/*  Sets the current mouse mode to the mode saved in giLastMouseCursor if there
/*  is one saved. This will also clear giLastMouseCursor.
/******************************************************************************/
function RestoreMouseMode(){
  // If no mouse mode was saved revert to the walk icon.
  if( giLastMouseCursor == -1 ){
    mouse.Mode = eModeWalkto;
    return;
  }
  
  mouse.Mode = giLastMouseCursor;
  giLastMouseCursor = -1;
}

/******************************************************************************/
/*  ShowDeathGUI()
/*  Opens the Death panel with the intended death message
/******************************************************************************/
function ShowDeathGUI( int deathNumber ){
  SaveMouseMode();
  mouse.Mode = eModePointer;
  
  // Setup the death GUI
  
  // One way to lower your blood pressure
  if( deathNumber == eDeathOneWayToLowerYourBloodPressure ){
    deathHeader.Text = "One Way to Lower Your Blood Pressure.";
    deathMessage.Text = "A brave but fatal attempt at arterial art.";
    deathImage.NormalGraphic = 402;
  } else if( deathNumber == eDeathItSlicesItDices ){
    deathHeader.Text = "It Slices, It Dices...";
    deathMessage.Text = "You're a less-than-choice cut, Wilco!";
    deathImage.NormalGraphic = 407;
  } else if( deathNumber == eDeathDecelerationTrauma ){
    deathHeader.Text = "Deceleration Trauma";
    deathMessage.Text = "It wouldn't be so bad, except for the sudden stop at the end. Next time, don't get so close to the edge.";
    deathImage.NormalGraphic = 406;
    
    // Note, image changes based on scenario.    
  } else if( deathNumber == eDeathHoleInHone ){
    deathHeader.Text = "Hole In One!";
    deathMessage.Text = "Hope you enjoy your new flow-through ventilation system.";
    deathImage.NormalGraphic = 413;
  } else if( deathNumber == eDeathRats ){
    deathHeader.Text = "Rays!";
    deathMessage.Text = "You may not be Purina Rat Chow, but you'll do!";
    deathImage.NormalGraphic = 405;
  } else if( deathNumber == eDeathLearnToDriveThatThing ){
    deathHeader.Text = "Learn to Drive That Thing!";
    deathMessage.Text = "Your radar is designed to avoid just such an occurrence.";
    deathImage.NormalGraphic = 409;
  } else if( deathNumber == eDeathDecompressionBlues ){
    deathHeader.Text = "Decompression Blues";
    deathMessage.Text = "Sudden Decompression Sucks!";
    deathImage.NormalGraphic = 408;
  } else if( deathNumber == eDeathCongratulationsOnYourRecentDeath ){
    deathHeader.Text = "Congratulations On Your Recent Death !";
    deathMessage.Text = "Thanks for playing Space Quest III. As Usual, you've been a real hoot.";
    deathImage.NormalGraphic = 407;
    
    // Note, image changes based on scenario.
  } else if( deathNumber == eDeathDontTrustGuysInBlackSpacesuits ){
    deathHeader.Text = "Don't Trust Guys in Black Spacesuits";
    deathMessage.Text = "A pulselaser blast to the forehead is not your idea of fun. Fortunately, it didn't hit anything important.";
    deathImage.NormalGraphic = 413;
  } else if( deathNumber == eDeathSunbathingNotRecommended ){
    deathHeader.Text = "Sunbathing Not Recommeded";
    deathMessage.Text = "It's so hot you could fry a Vorlian phlegmsnake egg.";
    deathImage.NormalGraphic = 411;
  } else if( deathNumber == eDeathNewImprovedQuickTanningMethod ){
    deathHeader.Text = "New, Improved Quick Tanning Method";
    deathMessage.Text = "You never did care for fondue. Next time, don't get so close to the edge.";
    deathImage.NormalGraphic = 404;
  } else if( deathNumber == eDeathJustLikeMomUsedToMake ){
    deathHeader.Text = "Just Like Mom Used to Make";
    deathMessage.Text = "As your life sputters to a close, you decide to cut down on desserts.";
    deathImage.NormalGraphic = 410;
  } else if( deathNumber == eDeathBeMoreCarefulWithExposives ){
    deathHeader.Text = "Be More Careful With Explosives";
    deathMessage.Text = "Didn't mom always tell you not to play with firecrackers?";
    deathImage.NormalGraphic = 418;
  } else if( deathNumber == eDeathYouHaveBlownYourCover ){
    deathHeader.Text = "You have blown your `cover`";
    deathMessage.Text = "You have demonsatrated a surprising lack of janitorial skill. Perhaps this would be an opportune time to `brush up` on your technique with Space Quest I and II.";
    deathImage.NormalGraphic = 410;
  } else if( deathNumber == eDeathYouHaveTakenTheBigPlunge ){
    deathHeader.Text = "You have taken the big plunge";
    deathMessage.Text = "That's one small step for man... One giant leap for janitor-kind..";
    deathImage.NormalGraphic = 406;
  } else if( deathNumber == eDeathDownForTheCount ){
    deathHeader.Text = "Down for the Count";
    deathMessage.Text = "Better hang out at the gym more often.";
    deathImage.NormalGraphic = 412;
  }
  
  gDeath.Centre();
  gDeath.Visible = true;
}
/******************************************************************************/
/*  ShowControlPanelGUI()
/*  Opens the Control Panel
/******************************************************************************/
function ShowControlPanelGUI(){
  SaveMouseMode();
  
  gIconbar.Visible = false;
  mouse.Mode = eModePointer;
  
  if( UIType == "New" ) gNewPanel.Visible = true;
  else gPanel.Visible = true;
}
/******************************************************************************/
/*  HideControlPanelGUI()
/*  Closes the Control panel (either of them)
/******************************************************************************/
function HideControlPanelGUI(){
  gNewPanel.Visible = false;
  gPanel.Visible = false;
  
  gIconbar.Visible = true;
  
  RestoreMouseMode();
}
/******************************************************************************/
/*  ShowInvetnoryGUI()
/*  Opens the Inventory panel
/******************************************************************************/
function ShowInventoryGUI(){
  SaveMouseMode();
  
  mouse.Mode = eModeInteract;
  mouse.UseModeGraphic(eModePointer);
  gInventory.Centre();
  gInventory.Visible = true;
}
/******************************************************************************/
/*  HideRestartGUI()
/*  Closes the Inventory panel
/******************************************************************************/
function HideInventoryGUI(){
  gInventory.Visible = false;
  gIconbar.Visible = true;
  
  // Only restore the mouse cursor if the player hasn't selected an inventory item
  if( mouse.Mode != eModeUseinv )
    RestoreMouseMode();
}
/******************************************************************************/
/*  ShowSaveGameGUI()
/*  Opens the Save Game panel
/******************************************************************************/
function ShowSaveGameGUI(){
  SaveMouseMode();
  gSaveGame.Centre();
  mouse.UseModeGraphic(eModePointer);
  gIconbar.Visible = false;
  
  gSaveGame.Visible = true;
  lstSaveGamesList.FillSaveGameList();
}
/******************************************************************************/
/*  HideSaveGameGUI()
/*  Closes the Save Game panel
/******************************************************************************/
function HideSaveGameGUI(){
  gIconbar.Visible = true;
  gSaveGame.Visible = false;
  
  if( gNewPanel.Visible == false && gPanel.Visible == false )  
    RestoreMouseMode();
}
/******************************************************************************/
/*  ShowRestoreGameGUI()
/*  Opens the Restore panel
/******************************************************************************/
function ShowRestoreGameGUI(){
  SaveMouseMode();
  gRestoreGame.Centre();
  lstRestoreGamesList.FillSaveGameList();
  mouse.UseModeGraphic(eModePointer);
  gIconbar.Visible = false;
  
  gRestoreGame.Visible = true;
}
/******************************************************************************/
/*  HideRestoreGameGUI()
/*  Closes the Restore panel
/******************************************************************************/
function HideRestoreGameGUI(){
  gIconbar.Visible = true;
  gRestoreGame.Visible = false;
  
  if( gNewPanel.Visible == false && gPanel.Visible == false )
    RestoreMouseMode();
}
/******************************************************************************/
/*  ShowRestartGUI()
/*  Opens the Restart panel
/******************************************************************************/
function ShowRestartGUI(){
  SaveMouseMode();
  gRestart.Centre();
  mouse.UseModeGraphic(eModePointer);
  gIconbar.Visible = false;
  gRestart.Visible = true;
}
/******************************************************************************/
/*  HideRestartGUI()
/*  Closes the Restart panel
/******************************************************************************/
function HideRestartGUI(){
  gIconbar.Visible = true;
  gRestart.Visible = false;
  
  RestoreMouseMode();
}
/******************************************************************************/
/*  ShowQuitGUI()
/*  Opens the Quit panel
/******************************************************************************/
function ShowQuitGUI(){
  SaveMouseMode();
  gQuit.Centre();
  mouse.UseModeGraphic(eModePointer);
  gIconbar.Visible = false;
  gQuit.Visible = true;
}
/******************************************************************************/
/*  HideQuitGUI()
/*  Closes the Quit panel
/******************************************************************************/
function HideQuitGUI(){
  gIconbar.Visible = true;
  gQuit.Visible = false;
  
  RestoreMouseMode();
}

/******************************************************************************/
/*  SetGameUI( <TYPE > )
/*  Makes all the changes required to switch from one interface to the other.
/*  Expected values: New, Classic.
/******************************************************************************/
function SetGameUI( String newType ){
  if (newType=="New") {
    UIType = "New";
    bWalk.NormalGraphic = 251; bWalk.PushedGraphic = 250;
    bLook.NormalGraphic = 239; bLook.PushedGraphic = 238;
    bInteract.NormalGraphic = 249; bInteract.PushedGraphic = 248;
    bTalk.NormalGraphic = 245; bTalk.PushedGraphic = 244;
    bSmell.NormalGraphic = 243; bSmell.PushedGraphic = 242;
    bTaste.NormalGraphic = 247; bTaste.PushedGraphic = 246;
    btnIconInv.NormalGraphic = 237; btnIconInv.PushedGraphic = 236;
    bSettings.NormalGraphic = 241; bSettings.PushedGraphic = 240;
    btnIconAbout.NormalGraphic = 235; btnIconAbout.PushedGraphic = 234;
    
    gIconbar.BackgroundGraphic = 382;
    
    //mouse.ChangeModeGraphic(eModeWalkto, 212); mouse.ChangeModeView(eModeWalkto, 16); mouse.ChangeModeHotspot(eModeWalkto, 6, 19);
   
    mouse.ChangeModeGraphic(eModeWalkto, 396); mouse.ChangeModeHotspot(eModeWalkto, 7, 20);
    mouse.ChangeModeGraphic(eModeLookat, 397); mouse.ChangeModeHotspot(eModeLookat, 1, 1);
    mouse.ChangeModeGraphic(eModeInteract, 398); mouse.ChangeModeHotspot(eModeInteract, 1, 1);
    mouse.ChangeModeGraphic(eModeTalkto, 399); mouse.ChangeModeHotspot(eModeTalkto, 3, 20);
    mouse.ChangeModeGraphic(eModeSmell, 400); mouse.ChangeModeHotspot(eModeSmell, 1, 1);
    mouse.ChangeModeGraphic(eModeTaste, 401); mouse.ChangeModeHotspot(eModeTaste, 1, 1);
    mouse.ChangeModeGraphic(eModePointer, 197);
    // Mouse Animations?
    
    //mouse.ChangeModeView(eModeWalkto, 16);
    //mouse.ChangeModeView(eModeLookat, 17);
    //mouse.ChangeModeView(eModeInteract, 18);
    //mouse.ChangeModeView(eModeTalkto, 19);
    //mouse.ChangeModeView(eModeTaste, 21);
    // mouse.ChangeModeGraphic(eModeLookat, 199); mouse.ChangeModeHotspot(eModeLookat, 10, 9);
    // mouse.ChangeModeView(eModeSmell, 20); 
   // mouse.ChangeModeGraphic(eModeInteract, 210); mouse.ChangeModeView(eModeInteract, 18); mouse.ChangeModeHotspot(eModeInteract, 1, 0);
    //mouse.ChangeModeGraphic(eModeTalkto, 205); mouse.ChangeModeView(eModeTalkto, 19); mouse.ChangeModeHotspot(eModeTalkto, 5, 18);

    NewMusicSlider.Value = sldMusic.Value;
    NewSoundSlider.Value = sldAudio.Value;
    NewVoiceSlider.Value = sldVoice.Value;    
    sldNewSpeedSlider.Value = sldSpeed.Value;


    // Setup the Inventory GUI
    gInventory.Height = 200;
    gInventory.Width = 320;
    gInventory.BackgroundGraphic = 231;
    
    invCustomInv.SetPosition( 89, 60 );
        
    btnInvLook.NormalGraphic = 265;
    btnInvLook.PushedGraphic = 264;
    btnInvLook.SetPosition( 60, 71 );
    
    btnInvInteract.NormalGraphic = 269;
    btnInvInteract.PushedGraphic = 268;
    btnInvInteract.SetPosition( 60, 94 );
    
    btnInvSelect.NormalGraphic = 259;
    btnInvSelect.PushedGraphic = 258;
    btnInvSelect.SetPosition( 60, 50 );
   
    btnInvOK.NormalGraphic = 263;
    btnInvOK.PushedGraphic = 262;
    btnInvOK.SetPosition( 235,43 );

    btnInvUp.SetPosition( 245, 83 );
    btnInvDown.SetPosition( 245, 110 );

    gInventory.Centre();

    // Reopen the control panel, if it is currently open
    if( gPanel.Visible ){
      gPanel.Visible = false;
      gNewPanel.Visible = true;
      mouse.UseModeGraphic(eModePointer);
    }
  }
  else if (newType=="Classic") {
    UIType = "Classic";
    bWalk.NormalGraphic = 37; bWalk.PushedGraphic = 36;
    bLook.NormalGraphic = 25; bLook.PushedGraphic = 24;
    bInteract.NormalGraphic = 19; bInteract.PushedGraphic = 18;
    bTalk.NormalGraphic = 33; bTalk.PushedGraphic = 32;
    bSmell.NormalGraphic = 31; bSmell.PushedGraphic = 30;
    bTaste.NormalGraphic = 35; bTaste.PushedGraphic = 34;
    btnIconInv.NormalGraphic = 23; btnIconInv.PushedGraphic = 22;
    bSettings.NormalGraphic = 29; bSettings.PushedGraphic = 28;
    btnIconAbout.NormalGraphic = 21; btnIconAbout.PushedGraphic = 20;
    
    //mouse.ChangeModeView(eModeWalkto, 22);
    //mouse.ChangeModeView(eModeLookat, 23);
    //mouse.ChangeModeView(eModeInteract, 24);
    //mouse.ChangeModeView(eModeTalkto, 25);
    //mouse.ChangeModeView(eModeSmell, 26);
    //mouse.ChangeModeView(eModeTaste, 27); 
    
    mouse.ChangeModeGraphic(eModeWalkto, 44); mouse.ChangeModeHotspot(eModeWalkto, 3, 8);
    mouse.ChangeModeGraphic(eModeLookat, 40); mouse.ChangeModeHotspot(eModeLookat, 3, 3);
    mouse.ChangeModeGraphic(eModeInteract, 38); mouse.ChangeModeHotspot(eModeInteract, 3, 3);
    mouse.ChangeModeGraphic(eModeTalkto, 42); mouse.ChangeModeHotspot(eModeTalkto, 5, 4);
    mouse.ChangeModeGraphic(eModeSmell, 41); mouse.ChangeModeHotspot(eModeSmell, 3, 3);
    mouse.ChangeModeGraphic(eModeTaste, 43); mouse.ChangeModeHotspot(eModeTaste, 3, 3);
    mouse.ChangeModeGraphic(eModePointer, 70);
    sldMusic.Value = NewMusicSlider.Value;
    sldAudio.Value = NewSoundSlider.Value;
    sldVoice.Value = NewVoiceSlider.Value;
    sldSpeed.Value = sldSpeed.Value;      

    // Setup the Inventory GUI
    gInventory.Height = 142;
    gInventory.Width = 216;
    gInventory.BackgroundGraphic = 456;
    
    
    invCustomInv.SetPosition( 11, 10 );
    
    btnInvLook.NormalGraphic = 25;
    btnInvLook.PushedGraphic = 24;
    btnInvLook.SetPosition( 12, 110 );
    
    btnInvInteract.NormalGraphic = 19;
    btnInvInteract.PushedGraphic = 18;
    btnInvInteract.SetPosition( 45, 110 );    
    
    btnInvSelect.NormalGraphic = 15;
    btnInvSelect.PushedGraphic = 16;
    btnInvSelect.SetPosition( 77, 110 );
    
    btnInvOK.NormalGraphic = 26;
    btnInvOK.PushedGraphic = 27;
    btnInvOK.SetPosition( 108, 110 );


    btnInvUp.SetPosition( 194, 30 );
    btnInvDown.SetPosition( 194, 70 );
    
    gInventory.Centre();

    // Reopen the control panel, if it is currently open
    if( gNewPanel.Visible ){
      gNewPanel.Visible = false;
      gPanel.Visible = true;
      mouse.UseModeGraphic(eModePointer);
    }
  }
}
/******************************************************************************/
/*  SwapGameUI
/*  Determines current UI and calls SetGameUI for the one you are not
/*  currently using
/******************************************************************************/
function SwapGameUI(){
  if (UIType=="New")
    SetGameUI( "Classic" );
  else
    SetGameUI( "New" );
}
/******************************************************************************/
/*  initialize_control_panel()
/*  I haven't fully reviewed this yet. It was part of the code when I
/*  started playing around with it. Essentially just sets some control
/*  panel settings
/******************************************************************************/
// A function that initializes a bunch of stuff.
function initialize_control_panel() { 
  // Centre the control panel
  gPanel.Centre(); 
  // Centre the Restart dialog as well
  gRestart.Centre(); 
    
  //And now, set all the defaults
  System.Volume = 100;
  sldAudio.Value = System.Volume;
  SetGameSpeed(70);
  sldSpeed.Value = 70;




// UI Switching Stuff here
/*    UIType = "New";
    bWalk.NormalGraphic = 251; bWalk.PushedGraphic = 250;
    bLook.NormalGraphic = 239; bLook.PushedGraphic = 238;
    bInteract.NormalGraphic = 249; bInteract.PushedGraphic = 248;
    bTalk.NormalGraphic = 245; bTalk.PushedGraphic = 244;
    bSmell.NormalGraphic = 243; bSmell.PushedGraphic = 242;
    bTaste.NormalGraphic = 247; bTaste.PushedGraphic = 246;
    btnIconInv.NormalGraphic = 237; btnIconInv.PushedGraphic = 236;
    bSettings.NormalGraphic = 241; bSettings.PushedGraphic = 240;
    btnIconAbout.NormalGraphic = 235; btnIconAbout.PushedGraphic = 234;
    mouse.ChangeModeGraphic(eModeWalkto, 212); mouse.ChangeModeView(eModeWalkto, 16); mouse.ChangeModeHotspot(eModeWalkto, 6, 19);
    mouse.ChangeModeGraphic(eModeLookat, 199); mouse.ChangeModeView(eModeLookat, 17); mouse.ChangeModeHotspot(eModeLookat, 10, 9);
    mouse.ChangeModeGraphic(eModeInteract, 210); mouse.ChangeModeView(eModeInteract, 18); mouse.ChangeModeHotspot(eModeInteract, 1, 0);
    mouse.ChangeModeGraphic(eModeTalkto, 205); mouse.ChangeModeView(eModeTalkto, 19); mouse.ChangeModeHotspot(eModeTalkto, 5, 18);
    mouse.ChangeModeGraphic(eModeSmell, 203); mouse.ChangeModeView(eModeSmell, 20); mouse.ChangeModeHotspot(eModeSmell, 4, 6);
    mouse.ChangeModeGraphic(eModeTaste, 207); mouse.ChangeModeView(eModeTaste, 21); mouse.ChangeModeHotspot(eModeTaste, 8, 8);
    mouse.ChangeModeGraphic(eModePointer, 197);
    NewMusicSlider.Value = sldMusic.Value;
    NewSoundSlider.Value = sldAudio.Value;
    NewVoiceSlider.Value = sldVoice.Value;    
    NewSpeedSlider.Value = sldSpeed.Value;
    mouse.UseModeGraphic(eModePointer);
    gIconbar.BackgroundGraphic = 382;*/
  // End of the UI defaults
  
  if (IsSpeechVoxAvailable()) {
     Speech.VoiceMode = eSpeechVoiceAndText;
     btnVoice.NormalGraphic = 306;
     btnText.NormalGraphic = 311;
     SetSpeechVolume(255);
  }
  else {
    Speech.VoiceMode = eSpeechTextOnly;
    btnVoice.NormalGraphic = 305;
    btnText.NormalGraphic = 311;
  }
  
  /*if (System.SupportsGammaControl) {
    System.Gamma = 100;
    sldGamma.Value = 100;
  }*/
}
/******************************************************************************/
/*  int find_save_slow()
/*  I will need to review this to determine how it is used - JM 
/******************************************************************************/
int find_save_slot(String name)
{
  bool slots[] = new bool[999];
  int i = 0;
  while (i < lstSaveGamesList.ItemCount)
  {
    if (lstSaveGamesList.Items[i] == name)
    {
      // found existing save with matching name
      return lstSaveGamesList.SaveGameSlots[i];
    }
    // remember which slots are already taken
    slots[lstSaveGamesList.SaveGameSlots[i]] = true;
    i++;
  }
 
  // Find first free save slot, starting with slot 1
  i = 1;
  while (i < 999)
  {
    if (!slots[i])
      return i;
    i++;
  }
  // no free slots found
  return -1;
}
/******************************************************************************/
/*  HandleEscapeKey()
/*  Special function to handle pressing the escape key. I like to move
/*  this code to a function as it makes it easier to read the on_key_press
/*  code in globalscript and makes things easier to manage
/******************************************************************************/
function HandleEscapeKey(){
  if( gInventory.Visible )
    HideInventoryGUI();
  else if( gRestart.Visible)
    HideRestartGUI();
  else if( gSaveGame.Visible )
    HideSaveGameGUI();
  else if( gRestoreGame.Visible )
    HideRestoreGameGUI();
  else if( gNewPanel.Visible || gPanel.Visible )
    HideControlPanelGUI();
  else{
    mouse.SetPosition( 160, 10 );
    //ShowControlPanelGUI();
  }
}
/******************************************************************************/
/*  HandleRightClick()
/*  Special function to handle pressing the right mouse button. I like to move
/*  this code to a function as it makes it easier to read and manage
/******************************************************************************/
function HandleRightClick(){
  if( mouse.Mode == eModeWalkto )
    Mouse.Mode = eModeLookat;
  else if( mouse.Mode == eModeLookat )
    Mouse.Mode = eModeInteract;
  else if( mouse.Mode == eModeInteract )
    Mouse.Mode = eModeTalkto;
  else if( mouse.Mode == eModeTalkto )
    Mouse.Mode = eModeSmell;
  else if( mouse.Mode == eModeSmell )
    Mouse.Mode = eModeTaste;
  else if( mouse.Mode == eModeTaste && player.ActiveInventory != null )
    Mouse.Mode = eModeUseinv;
  else
    Mouse.Mode = eModeWalkto;
}